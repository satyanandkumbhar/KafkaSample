
============================
============================
============================KafkaPublisher
============================
============================


package uk.sk.kafka.messaging.KafkaPublisher;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import uk.sk.kafka.messaging.KafkaPublisher.pojos.Application;
import uk.sk.kafka.messaging.KafkaPublisher.pojos.Customer;


@Configuration
public class KafkaProducerConfig {
	Logger logger = LoggerFactory.getLogger(this.getClass());
 
	@Value(value = "${kafka.bootstrapAddress}") private String bootStrapAddress;
	
    @Bean
    public ProducerFactory<String, Customer> customerPublisherFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootStrapAddress);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }
 
    @Bean(name="customerPublisherTemplate")
    public KafkaTemplate<String, Customer> kafkaCustomerTemplate() {
        KafkaTemplate<String, Customer> kafkaTemplate = new KafkaTemplate<>(customerPublisherFactory());
        /*kafkaTemplate.setProducerListener(new ProducerListener<String, String>() {
			@Override
			public void onSuccess(String topic, Integer partition, String key, String value, RecordMetadata recordMetadata) {
				logger.info("Success: topic: {}, partition:: {}, key: {}, value: {}, offset: {}", topic, partition, key, value, recordMetadata.offset());
			}
			
			@Override
			public void onError(String topic, Integer partition, String key, String value, Exception exception) {
				logger.info("Failure: topic: {}, partition:: {}, key: {}, value: {}, Exception: {}", topic, partition, key, value, exception.getMessage());
			}
			
			@Override
			public boolean isInterestedInSuccess() {
				return true;
			}
		});*/
        return kafkaTemplate;
    }
    
    @Bean
    public ProducerFactory<String, Application> applicationPublisherFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootStrapAddress);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }
    
    @Bean(name="applicationPublisherTemplate")
    public KafkaTemplate<String, Application> kafkaApplicationTemplate() {
        KafkaTemplate<String, Application> kafkaTemplate = new KafkaTemplate<>(applicationPublisherFactory());
        return kafkaTemplate;
    }
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class KafkaSampleApplication {

	public static void main(String[] args) {
		SpringApplication.run(KafkaSampleApplication.class, args);
	}
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher.controllers;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import uk.sk.kafka.messaging.KafkaPublisher.pojos.Application;
import uk.sk.kafka.messaging.KafkaPublisher.pojos.Customer;

@RestController
public class RestEndPoints {
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired @Qualifier("customerPublisherTemplate") private KafkaTemplate<String, Customer> customerTemplate;
	@Autowired @Qualifier("applicationPublisherTemplate") private KafkaTemplate<String, Application> applicationTemplate;
	
	
	private ProducerRecord<String, Customer> createCustomerMessage(Customer customer) {
		return new ProducerRecord<String, Customer>("CUSTOMER", customer);
	}
	
	@RequestMapping(method= {RequestMethod.GET})
	public ResponseEntity<?> ping() {
		return new ResponseEntity<String>("Success", HttpStatus.OK);
	}
	
	@RequestMapping(method= {RequestMethod.POST}, path="/publishCust", consumes="application/json")
	public ResponseEntity<?> publishCustomer(@RequestBody Customer value) {
		ListenableFuture<SendResult<String, Customer>> lFuture = customerTemplate.send(createCustomerMessage(value));
		lFuture.addCallback(new ListenableFutureCallback<SendResult<String, Customer>>() {
			
		    @Override
		    public void onFailure(Throwable ex) {
		    	logger.info("Failure received (CUSTOMER) in (ListenableFuture): "+ ex.getMessage());
		    }

			@Override
			public void onSuccess(SendResult<String, Customer> arg0) {
				logger.info("Success received (CUSTOMER) in (ListenableFuture): "+ arg0.getProducerRecord().topic());
			}

		});
		return new ResponseEntity<String>("Success", HttpStatus.ACCEPTED);
	}
	
	private ProducerRecord<String, Application> createApplicationMessage(Application application) {
		return new ProducerRecord<String, Application>("APPLICATION", application);
	}
	
	@RequestMapping(method= {RequestMethod.POST}, path="/publishApp", consumes="application/json")
	public ResponseEntity<?> publishApplication(@RequestBody Application application) {
		ListenableFuture<SendResult<String, Application>> lFuture = applicationTemplate.send(createApplicationMessage(application));
		lFuture.addCallback(new ListenableFutureCallback<SendResult<String, Application>>() {
			
		    @Override
		    public void onFailure(Throwable ex) {
		    	logger.info("Failure received (APPLICATION) in (ListenableFuture): "+ ex.getMessage());
		    }

			@Override
			public void onSuccess(SendResult<String, Application> arg0) {
				logger.info("Success received (APPLICATION) in (ListenableFuture): "+ arg0.getProducerRecord().topic());
			}

		});
		return new ResponseEntity<String>("Success", HttpStatus.ACCEPTED);
	}
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher.pojos;

public class Application {
	private Long id;
	private Long customerId;
	private String heiCode;
	private String courseCode;
	private String courseYear;
	private Integer tflAmount;
	private Integer mlAmount;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Long getCustomerId() {
		return customerId;
	}
	public void setCustomerId(Long customerId) {
		this.customerId = customerId;
	}
	public String getHeiCode() {
		return heiCode;
	}
	public void setHeiCode(String heiCode) {
		this.heiCode = heiCode;
	}
	public String getCourseCode() {
		return courseCode;
	}
	public void setCourseCode(String courseCode) {
		this.courseCode = courseCode;
	}
	public String getCourseYear() {
		return courseYear;
	}
	public void setCourseYear(String courseYear) {
		this.courseYear = courseYear;
	}
	public Integer getTflAmount() {
		return tflAmount;
	}
	public void setTflAmount(Integer tflAmount) {
		this.tflAmount = tflAmount;
	}
	public Integer getMlAmount() {
		return mlAmount;
	}
	public void setMlAmount(Integer mlAmount) {
		this.mlAmount = mlAmount;
	}		
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher.pojos;

public class Customer {
	private Long id;
	private String firstName;
	private String lastName;
	private String emailAddress;
	private String addressLine1;
	private String addressLine2;
	private String city;
	private String postalCode;
	private String phoneNumber;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmailAddress() {
		return emailAddress;
	}
	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}
	public String getAddressLine1() {
		return addressLine1;
	}
	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}
	public String getAddressLine2() {
		return addressLine2;
	}
	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getPostalCode() {
		return postalCode;
	}
	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	@Override
	public String toString() {
		return "Customer [id=" + id + ", firstName=" + firstName + ", lastName=" + lastName + ", emailAddress="
				+ emailAddress + ", addressLine1=" + addressLine1 + ", addressLine2=" + addressLine2 + ", city=" + city
				+ ", postalCode=" + postalCode + ", phoneNumber=" + phoneNumber + "]";
	}	
}

==================================================  application.properties ====================================================

server.port=9205
server.context-path=/kpublisher
kafka.bootstrapAddress=localhost:9092
message.topic.name=HE_P
kafka.groupid=HE
=================================================================================================================================


============================
============================
============================KafkaApplicationConsumer
============================
	<groupId>uk.sk.kafka.messaging</groupId>
	<artifactId>KafkaApplicationConsumer</artifactId>
============================

package uk.sk.kafka.messaging.KafkaSample.CustomerConsumer;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class KafkaCustConsumerApplication {

	public static void main(String[] args) {
		SpringApplication.run(KafkaCustConsumerApplication.class, args);
	}
}



package uk.sk.kafka.messaging.KafkaSample.CustomerConsumer;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.ErrorHandler;
import org.springframework.kafka.support.converter.StringJsonMessageConverter;
import org.springframework.retry.RecoveryCallback;
import org.springframework.retry.RetryContext;
import org.springframework.retry.backoff.ExponentialBackOffPolicy;
import org.springframework.retry.backoff.FixedBackOffPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.util.ObjectUtils;
import org.springframework.web.client.RestTemplate;

import uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos.Application;
import uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos.Subscriber;

@Configuration
@EnableKafka
public class KafkaApplicationConsumerConfig {
	
	Logger logger = LoggerFactory.getLogger(this.getClass());
	@Value(value = "${kafka.bootstrapAddress}") private String bootstrapAddress;
	@Value(value = "${kafka.groupid}") private String groupId;
	@Value(value = "${backoff.policy.strategy}") private String backoffPolicy;
	@Autowired private RestTemplate restTemplate;
	
	@Bean
	public Subscriber subscribers() {
		return new Subscriber();
	}
	
	@Bean
    public ConsumerFactory<String, Application> consumerFactory() {
        Map<String, Object> props = new HashMap<String, Object>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        return new DefaultKafkaConsumerFactory<String, Application>(props);
    }
	
	/** SetUp Retry **/
	/**
	 * Error handler to work with
	 * @return
	 */
	@Bean
	public ErrorHandler errorHandler() {
		return new ErrorHandler() {

			@Override
			public void handle(Exception thrownException, ConsumerRecord<?, ?> record) {
				logger.error("Error while processing: " + ObjectUtils.nullSafeToString(record), thrownException);
			}
			
		};
	}
	
	@Bean
    public RetryTemplate retryTemplate() {
        RetryTemplate retryTemplate = new RetryTemplate();
         
        FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();
        fixedBackOffPolicy.setBackOffPeriod(5000l);

        ExponentialBackOffPolicy ebPolicy = new ExponentialBackOffPolicy();
        ebPolicy.setInitialInterval(5000l);
        ebPolicy.setMultiplier(2);

        if ("EB".equals(backoffPolicy)) {
        	retryTemplate.setBackOffPolicy(ebPolicy);
        } else if ("FB".equals(backoffPolicy)) {
        	retryTemplate.setBackOffPolicy(fixedBackOffPolicy);
        }
 
        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();
        retryPolicy.setMaxAttempts(4);
        retryTemplate.setRetryPolicy(retryPolicy);
        
        return retryTemplate;
    }
	
	@Bean
	RestTemplate restTemplate() {
		return new RestTemplate();
	}
	
	/**
	 * Publishes the error to ELK after all retries are failed
	 * @param message
	 */
	private void publishToELK(String message) {
		String subscriberUrl = "http://localhost:9201/kp/publish?val=mm";
		try {
			ResponseEntity<String> response 
				= restTemplate.postForEntity(subscriberUrl, null, String.class);
			logger.info("POSTed the retry message......");
			System.out.println("Application published to : " + subscriberUrl + ", with response: " + response.getStatusCodeValue());
		} catch (Exception ex) {
			System.out.println("Failed to send APPLICATION to subscriber: "+ subscriberUrl);
		}
	}
	/*   */
 
    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Application> 
      kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, Application> factory
          	= new ConcurrentKafkaListenerContainerFactory<String, Application>();
        factory.setConsumerFactory(consumerFactory());
        
        /** Setup Error handling and retry **/
        factory.getContainerProperties().setErrorHandler(errorHandler()); //Set Error Handler
        factory.setRetryTemplate(retryTemplate()); //Set retry policy
        factory.setRecoveryCallback(new RecoveryCallback<ConsumerRecord<String, String>>() {

			@Override
			public ConsumerRecord<String, String> recover(RetryContext arg0) throws Exception {
				Object consumerRecordObject = arg0.getAttribute("record");
				if (consumerRecordObject instanceof ConsumerRecord) {
					ConsumerRecord<String, String> recordMap = (ConsumerRecord<String, String>) consumerRecordObject;
					logger.error("All retries are failed while consuming application at topic: {}, offset: {}, value: {}", recordMap.offset(), recordMap.topic(), recordMap.value());
				}
				//publishToELK(String message);
				return null;
			}
		});
        
        factory.setMessageConverter(new StringJsonMessageConverter());
        return factory;
    }
}


package uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.consumer;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos.Application;
import uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos.Subscriber;

@Component
public class KafkaApplicationConsumer {

	@Value(value = "${kafka.groupid}") private String groupId;
	@Autowired private Subscriber subcriber;
	@Autowired private RestTemplate restTemplate;
		
	@KafkaListener(topics = "APPLICATION", group = "HE_COMMON")
	public void listen(Application application) {
		publish(application);
	    System.out.println("Application Received: " + application);
	}
	
	@Bean
	RestTemplate restTemplate() {
		RestTemplate restTemplate = new RestTemplate();
		//MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
		//converter.setObjectMapper(new ObjectMapper());
		//restTemplate.getMessageConverters().add(converter);
		return restTemplate;
	}
	
	private void publish(Application application) {
		Set<String> subscribers = subcriber.getSubscribers();
		for (String subscriberUrl : subscribers) {
			try {
				ResponseEntity<HttpStatus> response 
					= restTemplate.postForEntity(subscriberUrl, application, HttpStatus.class);
				System.out.println("Application published to : " + subscriberUrl + ", with response: " + response.getStatusCodeValue());
			} catch (Exception ex) {
				System.out.println("Failed to send APPLICATION to subscriber: "+ subscriberUrl);
			}
		}
	}
}


package uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.controllers;

import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos.Subscriber;

@RestController
public class RestEndPoints {
	Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired private Subscriber subscribers;
	
	@RequestMapping(method= {RequestMethod.GET})
	public ResponseEntity<?> ping() {
		return new ResponseEntity<String>("Success", HttpStatus.OK);
	}
	
	@RequestMapping(method= {RequestMethod.GET}, path="/app/subscribe")
	public ResponseEntity<?> getSubscribers() {
		return new ResponseEntity<Set<String>>(subscribers.getSubscribers(), HttpStatus.OK);
	}
	
	@RequestMapping(method= {RequestMethod.PUT}, path="/app/subscribe")
	public ResponseEntity<?> addSubscriber(@RequestParam(name="url") String url) {
		logger.info("Application consumer [add - subscriber] request for: "+ url +", Received ");
		subscribers.addSubscriber(url);
		return new ResponseEntity<String>("Success", HttpStatus.ACCEPTED);
	}
	
	@RequestMapping(method= {RequestMethod.DELETE}, path="/app/subscribe")
	public ResponseEntity<?> removeSubscriber(@RequestParam(name="url") String url) {
		logger.info("Application consumer [remove - subscription] request for: "+ url +", Received ");
		subscribers.removeSubscriber(url);
		return new ResponseEntity<String>("Success", HttpStatus.ACCEPTED);
	}
}


package uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos;

public class Application {
	private Long id;
	private Long customerId;
	private String heiCode;
	private String courseCode;
	private String courseYear;
	private Integer tflAmount;
	private Integer mlAmount;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Long getCustomerId() {
		return customerId;
	}
	public void setCustomerId(Long customerId) {
		this.customerId = customerId;
	}
	public String getHeiCode() {
		return heiCode;
	}
	public void setHeiCode(String heiCode) {
		this.heiCode = heiCode;
	}
	public String getCourseCode() {
		return courseCode;
	}
	public void setCourseCode(String courseCode) {
		this.courseCode = courseCode;
	}
	public String getCourseYear() {
		return courseYear;
	}
	public void setCourseYear(String courseYear) {
		this.courseYear = courseYear;
	}
	public Integer getTflAmount() {
		return tflAmount;
	}
	public void setTflAmount(Integer tflAmount) {
		this.tflAmount = tflAmount;
	}
	public Integer getMlAmount() {
		return mlAmount;
	}
	public void setMlAmount(Integer mlAmount) {
		this.mlAmount = mlAmount;
	}
	@Override
	public String toString() {
		return "Application [id=" + id + ", customerId=" + customerId + ", heiCode=" + heiCode + ", courseCode="
				+ courseCode + ", courseYear=" + courseYear + ", tflAmount=" + tflAmount + ", mlAmount=" + mlAmount
				+ "]";
	}
}



package uk.sk.kafka.messaging.KafkaSample.CustomerConsumer.pojos;

import java.util.LinkedHashSet;
import java.util.Set;

public class Subscriber {
	private Set<String> subscribers = new LinkedHashSet<>();
	
	public Set<String> getSubscribers() {
		return subscribers;
	}

	public void addSubscriber(String url) {
		subscribers.add(url);		
	}
	
	public void removeSubscriber(String url) {
		subscribers.remove(url);		
	}
}

==================================================  application.properties ====================================================

server.port=9206
server.context-path=/kac
kafka.bootstrapAddress=localhost:9092
message.topic.name=APPLICATION
kafka.groupid=HE_COMMON
backoff.policy.strategy=EB

