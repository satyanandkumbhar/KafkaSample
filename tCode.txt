
package uk.sk.kafka.messaging.KafkaPublisher;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import uk.sk.kafka.messaging.KafkaPublisher.pojos.Application;
import uk.sk.kafka.messaging.KafkaPublisher.pojos.Customer;


@Configuration
public class KafkaProducerConfig {
	Logger logger = LoggerFactory.getLogger(this.getClass());
 
	@Value(value = "${kafka.bootstrapAddress}") private String bootStrapAddress;
	
    @Bean
    public ProducerFactory<String, Customer> customerPublisherFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootStrapAddress);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }
 
    @Bean(name="customerPublisherTemplate")
    public KafkaTemplate<String, Customer> kafkaCustomerTemplate() {
        KafkaTemplate<String, Customer> kafkaTemplate = new KafkaTemplate<>(customerPublisherFactory());
        /*kafkaTemplate.setProducerListener(new ProducerListener<String, String>() {
			@Override
			public void onSuccess(String topic, Integer partition, String key, String value, RecordMetadata recordMetadata) {
				logger.info("Success: topic: {}, partition:: {}, key: {}, value: {}, offset: {}", topic, partition, key, value, recordMetadata.offset());
			}
			
			@Override
			public void onError(String topic, Integer partition, String key, String value, Exception exception) {
				logger.info("Failure: topic: {}, partition:: {}, key: {}, value: {}, Exception: {}", topic, partition, key, value, exception.getMessage());
			}
			
			@Override
			public boolean isInterestedInSuccess() {
				return true;
			}
		});*/
        return kafkaTemplate;
    }
    
    @Bean
    public ProducerFactory<String, Application> applicationPublisherFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootStrapAddress);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }
    
    @Bean(name="applicationPublisherTemplate")
    public KafkaTemplate<String, Application> kafkaApplicationTemplate() {
        KafkaTemplate<String, Application> kafkaTemplate = new KafkaTemplate<>(applicationPublisherFactory());
        return kafkaTemplate;
    }
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class KafkaSampleApplication {

	public static void main(String[] args) {
		SpringApplication.run(KafkaSampleApplication.class, args);
	}
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher.controllers;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import uk.sk.kafka.messaging.KafkaPublisher.pojos.Application;
import uk.sk.kafka.messaging.KafkaPublisher.pojos.Customer;

@RestController
public class RestEndPoints {
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired @Qualifier("customerPublisherTemplate") private KafkaTemplate<String, Customer> customerTemplate;
	@Autowired @Qualifier("applicationPublisherTemplate") private KafkaTemplate<String, Application> applicationTemplate;
	
	
	private ProducerRecord<String, Customer> createCustomerMessage(Customer customer) {
		return new ProducerRecord<String, Customer>("CUSTOMER", customer);
	}
	
	@RequestMapping(method= {RequestMethod.GET})
	public ResponseEntity<?> ping() {
		return new ResponseEntity<String>("Success", HttpStatus.OK);
	}
	
	@RequestMapping(method= {RequestMethod.POST}, path="/publishCust", consumes="application/json")
	public ResponseEntity<?> publishCustomer(@RequestBody Customer value) {
		ListenableFuture<SendResult<String, Customer>> lFuture = customerTemplate.send(createCustomerMessage(value));
		lFuture.addCallback(new ListenableFutureCallback<SendResult<String, Customer>>() {
			
		    @Override
		    public void onFailure(Throwable ex) {
		    	logger.info("Failure received (CUSTOMER) in (ListenableFuture): "+ ex.getMessage());
		    }

			@Override
			public void onSuccess(SendResult<String, Customer> arg0) {
				logger.info("Success received (CUSTOMER) in (ListenableFuture): "+ arg0.getProducerRecord().topic());
			}

		});
		return new ResponseEntity<String>("Success", HttpStatus.ACCEPTED);
	}
	
	private ProducerRecord<String, Application> createApplicationMessage(Application application) {
		return new ProducerRecord<String, Application>("APPLICATION", application);
	}
	
	@RequestMapping(method= {RequestMethod.POST}, path="/publishApp", consumes="application/json")
	public ResponseEntity<?> publishApplication(@RequestBody Application application) {
		ListenableFuture<SendResult<String, Application>> lFuture = applicationTemplate.send(createApplicationMessage(application));
		lFuture.addCallback(new ListenableFutureCallback<SendResult<String, Application>>() {
			
		    @Override
		    public void onFailure(Throwable ex) {
		    	logger.info("Failure received (APPLICATION) in (ListenableFuture): "+ ex.getMessage());
		    }

			@Override
			public void onSuccess(SendResult<String, Application> arg0) {
				logger.info("Success received (APPLICATION) in (ListenableFuture): "+ arg0.getProducerRecord().topic());
			}

		});
		return new ResponseEntity<String>("Success", HttpStatus.ACCEPTED);
	}
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher.pojos;

public class Application {
	private Long id;
	private Long customerId;
	private String heiCode;
	private String courseCode;
	private String courseYear;
	private Integer tflAmount;
	private Integer mlAmount;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Long getCustomerId() {
		return customerId;
	}
	public void setCustomerId(Long customerId) {
		this.customerId = customerId;
	}
	public String getHeiCode() {
		return heiCode;
	}
	public void setHeiCode(String heiCode) {
		this.heiCode = heiCode;
	}
	public String getCourseCode() {
		return courseCode;
	}
	public void setCourseCode(String courseCode) {
		this.courseCode = courseCode;
	}
	public String getCourseYear() {
		return courseYear;
	}
	public void setCourseYear(String courseYear) {
		this.courseYear = courseYear;
	}
	public Integer getTflAmount() {
		return tflAmount;
	}
	public void setTflAmount(Integer tflAmount) {
		this.tflAmount = tflAmount;
	}
	public Integer getMlAmount() {
		return mlAmount;
	}
	public void setMlAmount(Integer mlAmount) {
		this.mlAmount = mlAmount;
	}		
}

===================================================================================================================================

package uk.sk.kafka.messaging.KafkaPublisher.pojos;

public class Customer {
	private Long id;
	private String firstName;
	private String lastName;
	private String emailAddress;
	private String addressLine1;
	private String addressLine2;
	private String city;
	private String postalCode;
	private String phoneNumber;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmailAddress() {
		return emailAddress;
	}
	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}
	public String getAddressLine1() {
		return addressLine1;
	}
	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}
	public String getAddressLine2() {
		return addressLine2;
	}
	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getPostalCode() {
		return postalCode;
	}
	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	@Override
	public String toString() {
		return "Customer [id=" + id + ", firstName=" + firstName + ", lastName=" + lastName + ", emailAddress="
				+ emailAddress + ", addressLine1=" + addressLine1 + ", addressLine2=" + addressLine2 + ", city=" + city
				+ ", postalCode=" + postalCode + ", phoneNumber=" + phoneNumber + "]";
	}	
}

==================================================  application.properties ====================================================

server.port=9205
server.context-path=/kpublisher
kafka.bootstrapAddress=localhost:9092
message.topic.name=HE_P
kafka.groupid=HE

